package com.leetcode.strings.easy;

// Given a string s consisting only of letters 'a' and 'b'. In a single step you
// can remove one palindromic subsequence from s.
//
// Return the minimum number of steps to make the given string empty.
//
// A string is a subsequence of a given string, if it is generated by deleting s
// ome characters of a given string without changing its order.
//
// A string is called palindrome if is one that reads the same backward as well
// as forward.
//
//
// Example 1:
//
//
// Input: s = "ababa"
// Output: 1
// Explanation: String is already palindrome
//
//
// Example 2:
//
//
// Input: s = "abb"
// Output: 2
// Explanation: "abb" -> "bb" -> "".
// Remove palindromic subsequence "a" then "bb".
//
//
// Example 3:
//
//
// Input: s = "baabb"
// Output: 2
// Explanation: "baabb" -> "b" -> "".
// Remove palindromic subsequence "baab" then "b".
//
//
// Example 4:
//
//
// Input: s = ""
// Output: 0
//
//
//
// Constraints:
//
//
// 0 <= s.length <= 1000
// s only consists of letters 'a' and 'b'
// Related Topics String
// 👍 303 👎 618

// leetcode submit region begin(Prohibit modification and deletion)
/*
 O(n) Runtime: 0 ms, faster than 100.00% of Java online submissions for Remove Palindromic Subsequences.
 O(1) Memory Usage: 36.9 MB, less than 49.77% of Java online submissions for Remove Palindromic Subsequences.
*/
public class RemovePalindromicSubsequences_1332 {
  public int removePalindromeSub(String s) {
    if (s.isEmpty()) {
      return 0;
    }

    return isPalindrome(s) ? 1 : 2;
  }

  boolean isPalindrome(String s) {
    int left = 0;
    int right = s.length() - 1;

    while (left < right) {
      if (s.charAt(left++) != s.charAt(right--)) {
        return false;
      }
    }

    return true;
  }
}
// leetcode submit region end(Prohibit modification and deletion)
