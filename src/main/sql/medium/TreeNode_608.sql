-- #Given a table tree, id is identifier of the tree node and p_id is its parent no
-- #de's id.
-- #
-- #
-- #+----+------+
-- #| id | p_id |
-- #+----+------+
-- #| 1  | null |
-- #| 2  | 1    |
-- #| 3  | 1    |
-- #| 4  | 2    |
-- #| 5  | 2    |
-- #+----+------+
-- #
-- #Each node in the tree can be one of three types:
-- #
-- #
-- # Leaf: if the node is a leaf node.
-- # Root: if the node is the root of the tree.
-- # Inner: If the node is neither a leaf node nor a root node.
-- #
-- #
-- #
-- #Write a query to print the node id and the type of the node. Sort your output b
-- #y the node id. The result for the above sample is:
-- #
-- #
-- #
-- #
-- #+----+------+
-- #| id | Type |
-- #+----+------+
-- #| 1  | Root |
-- #| 2  | Inner|
-- #| 3  | Leaf |
-- #| 4  | Leaf |
-- #| 5  | Leaf |
-- #+----+------+
-- #
-- #
-- #
-- #
-- # Explanation
-- #
-- #
-- #
-- #
-- # Node '1' is root node, because its parent node is NULL and it has child node '
-- #2' and '3'.
-- # Node '2' is inner node, because it has parent node '1' and child node '4' and
-- #'5'.
-- # Node '3', '4' and '5' is Leaf node, because they have parent node and they don
-- #'t have child node.
-- #
-- # And here is the image of the sample tree as below:
-- #
-- #
-- #
-- #			  1
-- #			/   \
-- #                      2       3
-- #                    /   \
-- #                  4       5
-- #
-- #
-- # Note
-- #
-- # If there is only one node on the tree, you only need to output its root attrib
-- #utes.
-- #
-- #
-- # üëç 232 üëé 13
--
-- Runtime: 360 ms, faster than 82.93% of MySQL online submissions for Tree Node.
-- Memory Usage: 0B, less than 100.00% of MySQL online submissions for Tree Node.
--
-- #leetcode submit region begin(Prohibit modification and deletion)
-- # Write your MySQL query statement below
--
SELECT DISTINCT parent.id,
                CASE
                    WHEN parent.p_id IS NULL THEN 'Root'
                    WHEN child.id IS NULL THEN 'Leaf'
                    ELSE 'Inner' END AS type
FROM tree parent
         LEFT JOIN tree child ON child.p_id = parent.id
ORDER BY parent.id;
-- #leetcode submit region end(Prohibit modification and deletion)
